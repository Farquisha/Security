Buffer Overflow Common Terms:

Heap    -    Memory that can be allocated and deallocated
Stack    -    A contiguous section of memory used for passing arguments
Registers    -    Storage elements as close as possible to the central processing unit (CPU)
Instruction Pointer (IP)    -    a.k.a Program Counter (PC), contains the address of next instruction to be executed
Stack Pointer (SP)    -    Contains the address of the next available space on the stack
Base Pointer (BP)    -    The base of the stack
Function    -    Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
Shellcode  -  The code that is executed once an exploit successfully takes advantage of a vulnerability

Buffer Overflow Defenses:
    - Non executable (NX) stack
    - Address Space Layout Randomization (ASLR)
    - Data Execution Prevention (DEP)
    - Stack Canaries
    - Position Independent Executable (PIE)

Technical Help
#########################
Utilizing tools such as:
    - IDA, GHIDRA
    - GDB, MONA, IMMUNITY
    - BASH, PYTHON
________________________________________________________________________________________________________________________________

GDB Uses
Installation of Peda Plugin:
git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit

COMMON COMMANDS:
disass <FUNCTION>   #   Disassemble portion of the program
info <...>  #   Supply info for specific stack areas
x/256c $<REGISTER>  #   Read characters from specific register
break <address>  #   Establish a break point
______________________________________________________________________________________________________________

reads first few bytes of file:
file

modify file permissions as needed: e.g
chmod u+x <filename>

utilize command substitution to see if file takes arguments or user input:
./<filename> $(echo "<whatever here>") [user input]

./<filename> <<<$(echo "whatever here>") [arguments]

utilize the buffer overflow script if on linux:
linbuffer.py

use gdb to see more detail during execution
gdb commands:
run
shell
info functions
clear
pdisass
show env

to run code in gdb:
run <<<$(./linbuffer.py)

msfconsole    -    metasploit!?!?!

To run gdb with no peda addon:
env - gdb ./<filename>

gdb w/out peda commands:
show env
unset env <ENVIRONMENT>
info proc map

0xff    -    hex for jmp
0xe4    -    hex for esp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
metasploit
use payload/linux/x86/exec
generate -b '\x00' -f python
*OR*
msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python

Clear the env
run the executable and make sure it crashes
info proc map
first mem addr after heap
mem addr at end of stack








































