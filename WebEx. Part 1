sudo tcpdump -XXvvnni any tcp port 80 -A
---------------------------------------------------------------------------------------------------------------------------------------------------
HTTP Methods
GET
POST


HTTP Response codes:
10X = informational
2XX = Success
30X = Redirection
4XX = Client Error
5XX = Server Error

HTTP Fields:
User-agent    -->    whatever was used to communicate with the server. e.g. wget, curl, etc
Referer    -->    Beyond the scope of COSC Security, apparently
Cookie    -->    
Date    -->    Sorry, not interested
Server    -->    What software the server is using
Set-cookie    -->    How the server tells the client to interpret certain info
---------------------------------------------------------------------------------------------------------------------------------------------------
Utilize the URL to create a get request:
http://10.50.x.x/path/pathdemo.php?myfile=demo1

Wget:    --    Only use with FTP
wget -r -l2 -P /tmp ftp://ftpserver/

cURL
    - Not recursive
    - Can use pipes
    - Upload ability
    - Supports more protocols vs Wget, such as SCP & POP3
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
curl -o stuff.html https://web.site/stuff.html
curl 'https://web.site/submit.php' -H 'Cookie: name=123; settings=1,2,3,4,5,6,7' --data 'name=Stan' | base64 -d > item.png
---------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript (JS)
    - Allows websites to interact with the client
        - JavaScript runs on the client’s machine
    - Coded as .js files, or in-line of HTML

JS Interaction

<script>
function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
<script src="https://www.w3schools.com/js/myScript1.js"></script>
---------------------------------------------------------------------------------------------------------------------------------------------------
Enumeration:
    Robots.txt
    Legitimate surfing
    Tools;
        - NSE scripts
        - Nikto
        - Burp suite (outside class)


Cross-Site Scripting (XSS) Overview:
    - Insertion of arbitrary code into a webpage, that executes in the browser of visitors
    - Unsanitized GET, POST, and PUT methods allow JS to be placed on websites
    - Often found in forums that allow HTML

Reflected XSS:
    Most common form of XSS
    occurs in error messages or search results
    delivered through intermediate media, like a link in an email
    Characters that are normally illegal in URLs can be Base64 encoded

Stored XSS:
    - Resides on vulnerable site
    - Only requires user to visit page
<img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">

Useful JavaScript Components:
Proof of concept (simple alert);
<script>alert('XSS');</script>
  - Capturing Cookies
    `document.cookie`

  - Capturing Keystrokes
      ~ bind `KEYDOWN` and `KEYUP`

  - Capturing Sensitive Data
    `document.body.innerHTML`
---------------------------------------------------------------------------------------------------------------------------------------------------

Server-Side injection:

Directory Traversal/Path Traversal
    - Ability to read/execute outside web server’s directory
    - Uses ../../ (relative paths) in manipulating a server-side file path
view_image.php?file=../../etc/passwd

Malicious File Upload:
Site allows unsanitized file uploads;
    - Server doesn’t validate extension or size
    - Allows for code execution (shell)
    - Once uploaded
        ~ Find your file
        ~ Call your file

Command Injection:    --    Application on the server is vulnerable, allowing execution of arbitrary commands

Might contain the following in it’s code:
`system("ping -c 1 ".$_GET["ip"]);`
Run the following to chain/stack our arbitrary command:
`; cat /etc/passwd`



























